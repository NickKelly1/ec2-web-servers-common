# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   66;
    types_hash_max_size 4096;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # https://nginx.org/en/docs/http/request_processing.html

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    # https://linuxize.com/post/redirect-http-to-https-in-nginx/#:~:text=The%20preferred%20method%20to%20redirect,unpredictable%20behavior%20of%20the%20server.
    # PERMA redirect ALL http to https
    server {
      listen 80 default_server;
      listen [::]:80 default_server;
      server_name _;
      return 301 https://$host$request_uri;
    }

		# https://regbrain.com/article/node-nginx-ec2
    # http - client
    # server {
    #   listen            80;
    #   listen            [::]:80;
    #   server_name       stateofjavascript.com www.stateofjavascript.com;
	  #   location / {
		#     proxy_pass http://localhost:3000;
		#   }
    # }

    # http - api
    # server {
    #   # redirect https
    #   listen            80;
    #   listen            [::]:80;
    #   server_name       api.stateofjavascript.com;
	  # 	location / {
	  # 	  proxy_pass http://localhost:1337;
	  #   }
    # }

    # http - x.nickkelly.dev
    # server {
    #   listen            80;
    #   listen            [::]:80;
    #   server_name       nickkelly.dev www.nickkelly.dev api.nickkelly.dev cms.nickkelly.dev;
	  #   location / {
    #     proxy_pass http://localhost:3000;
    #	  }
    # }

    # https://levelup.gitconnected.com/how-to-install-ssl-certificate-for-nginx-server-in-amazon-linux-2986f51371fb
    # https - soj-client
    server {
      listen                  443 ssl;
      server_name             stateofjavascript.com www.stateofjavascript.com;
      ssl_certificate         "/etc/letsencrypt/live/stateofjavascript.com/fullchain.pem";
      ssl_certificate_key     "/etc/letsencrypt/live/stateofjavascript.com/privkey.pem";
      # add_header Strict-Transport-Security "max-age=31536000";
      # other headers...
      location / {
			  proxy_pass http://localhost:3000;
      }
    }

    # https - soj-api
    server {
      listen                  443 ssl;
      server_name             api.stateofjavascript.com;
      ssl_certificate         "/etc/letsencrypt/live/stateofjavascript.com/fullchain.pem";
      ssl_certificate_key     "/etc/letsencrypt/live/stateofjavascript.com/privkey.pem";
      location / {
		    proxy_pass http://localhost:1337;
      }
    }

    # https - x.nickkelly.dev - docker registry
    server {
      listen                  443 ssl;
      server_name             docker.nickkelly.dev;
      ssl_certificate         "/etc/letsencrypt/live/nickkelly.dev/fullchain.pem";
      ssl_certificate_key     "/etc/letsencrypt/live/nickkelly.dev/privkey.pem";

      # https://www.keycdn.com/support/413-request-entity-too-large#:~:text=A%20413%20Request%20Entity%20Too,Request%20Entity%20Too%20Large%20response.
      # docker images / registry HTTP bodies are large
      client_max_body_size    200M;

      location / {
				proxy_pass http://localhost:5000;
      }
    }

    # https - x.nickkelly.dev
    server {
      listen                  443 ssl;
      server_name             nickkelly.dev www.nickkelly.dev api.nickkelly.dev cms.nickkelly.dev;
      ssl_certificate         "/etc/letsencrypt/live/nickkelly.dev/fullchain.pem";
      ssl_certificate_key     "/etc/letsencrypt/live/nickkelly.dev/privkey.pem";
      location / {
				proxy_pass http://localhost:3000;
      }
    }
  
 
# Default settings with amazon-linux nginx installation
#
    # server {
    #     listen       80;
    #     listen       [::]:80;
    #     server_name  _;
    #     root         /usr/share/nginx/html;

    #     # Load configuration files for the default server block.
    #     include /etc/nginx/default.d/*.conf;

    #     error_page 404 /404.html;
    #         location = /40x.html {
    #     }

    #     error_page 500 502 503 504 /50x.html;
    #         location = /50x.html {
    #     }
    # }

# Settings for a TLS enabled server.
#
#    server {
#        listen       443 ssl http2;
#        listen       [::]:443 ssl http2;
#        server_name  _;
#        root         /usr/share/nginx/html;
#
#        ssl_certificate "/etc/pki/nginx/server.crt";
#        ssl_certificate_key "/etc/pki/nginx/private/server.key";
#        ssl_session_cache shared:SSL:1m;
#        ssl_session_timeout  10m;
#        ssl_ciphers PROFILE=SYSTEM;
#        ssl_prefer_server_ciphers on;
#
#        # Load configuration files for the default server block.
#        include /etc/nginx/default.d/*.conf;
#
#        error_page 404 /404.html;
#            location = /40x.html {
#        }
#
#        error_page 500 502 503 504 /50x.html;
#            location = /50x.html {
#        }
#    }
}

